// v5.02.11 on 2019-03-20T11:10:42.027Z
jQuery(function($) {
 var GridForms = {
  el: {
   fieldsRows: $('[data-row-span]'),
   fieldsContainers: $('[data-field-span]'),
   focusableFields: $('input, textarea, select', '[data-field-span]'),
   window: $(window)
  },
  init: function() {
   this.focusField(this.el.focusableFields.filter(':focus')), this.equalizeFieldHeights(), 
   this.events();
  },
  focusField: function(currentField) {
   currentField.closest('[data-field-span]').addClass('focus');
  },
  removeFieldFocus: function() {
   this.el.fieldsContainers.removeClass('focus');
  },
  events: function() {
   var that = this;
   that.el.fieldsContainers.click(function(event) {
    var focusableFields = that.el.focusableFields;
    $(event.target).is(focusableFields) || $(this).find('input[type="text"],input[type="number"],input[type="tel"],input[type="email"], textarea, select').first().focus();
   }), that.el.focusableFields.focus(function() {
    that.focusField($(this));
   }), that.el.focusableFields.blur(function() {
    that.removeFieldFocus();
   }), that.el.window.resize(function() {
    that.equalizeFieldHeights();
   });
  },
  equalizeFieldHeights: function() {
   this.el.fieldsContainers.css("height", "auto");
   var fieldsRows = this.el.fieldsRows, fieldsContainers = this.el.fieldsContainers;
   !this.areFieldsStacked() && $(window).width() > 700 && fieldsRows.filter(":visible").each(function() {
    var fieldRow = $(this), rowInputs = fieldRow.children();
    if (1 !== rowInputs.length || 1 !== rowInputs.children("textarea").length) {
     var rowHeight = fieldRow.css('height');
     fieldRow.find(fieldsContainers).css('height', rowHeight);
    }
   });
  },
  areFieldsStacked: function() {
   var firstRow = this.el.fieldsRows.not('[data-row-span="1"]').first(), totalWidth = 0;
   return firstRow.children().each(function() {
    totalWidth += $(this).width();
   }), firstRow.width() <= totalWidth;
  }
 };
 GridForms.init(), GridForms = GridForms;
});