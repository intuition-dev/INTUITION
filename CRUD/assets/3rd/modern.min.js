// v5.02.11 on 2019-03-22T09:56:34.347Z
!function(window, document, undefined) {
 var classes = [], tests = [], ModernizrProto = {
  _version: '3.6.0',
  _config: {
   classPrefix: '',
   enableClasses: !0,
   enableJSClass: !0,
   usePrefixes: !0
  },
  _q: [],
  on: function(test, cb) {
   var self = this;
   setTimeout(function() {
    cb(self[test]);
   }, 0);
  },
  addTest: function(name, fn, options) {
   tests.push({
    name: name,
    fn: fn,
    options: options
   });
  },
  addAsyncTest: function(fn) {
   tests.push({
    name: null,
    fn: fn
   });
  }
 }, Modernizr = function() {};
 Modernizr.prototype = ModernizrProto, (Modernizr = new Modernizr()).addTest('customevent', 'CustomEvent' in window && 'function' == typeof window.CustomEvent), 
 Modernizr.addTest('promises', function() {
  return 'Promise' in window && 'resolve' in window.Promise && 'reject' in window.Promise && 'all' in window.Promise && 'race' in window.Promise && (new window.Promise(function(r) {
   resolve = r;
  }), 'function' == typeof resolve);
  var resolve;
 }), Modernizr.addTest('fetch', 'fetch' in window);
 var docElement = document.documentElement, isSVG = 'svg' === docElement.nodeName.toLowerCase();
 function createElement() {
  return 'function' != typeof document.createElement ? document.createElement(arguments[0]) : isSVG ? document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]) : document.createElement.apply(document, arguments);
 }
 var prefixes = ModernizrProto._config.usePrefixes ? ' -webkit- -moz- -o- -ms- '.split(' ') : [ '', '' ];
 ModernizrProto._prefixes = prefixes, Modernizr.addTest('csscalc', function() {
  var el = createElement('a');
  return el.style.cssText = "width:" + prefixes.join("calc(10px);width:"), !!el.style.length;
 }), function testRunner() {
  var featureNames, feature, aliasIdx, result, nameIdx, featureNameSplit;
  for (var featureIdx in tests) {
   if (tests.hasOwnProperty(featureIdx)) {
    if (featureNames = [], (feature = tests[featureIdx]).name && (featureNames.push(feature.name.toLowerCase()), 
    feature.options && feature.options.aliases && feature.options.aliases.length)) {
     for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {
      featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());
     }
    }
    for (result = 'function' == typeof feature.fn ? feature.fn() : feature.fn, nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {
     1 === (featureNameSplit = featureNames[nameIdx].split('.')).length ? Modernizr[featureNameSplit[0]] = result : (!Modernizr[featureNameSplit[0]] || Modernizr[featureNameSplit[0]] instanceof Boolean || (Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]])), 
     Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result), classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));
    }
   }
  }
 }(), function setClasses(classes) {
  var className = docElement.className, classPrefix = Modernizr._config.classPrefix || '';
  if (isSVG && (className = className.baseVal), Modernizr._config.enableJSClass) {
   var reJS = new RegExp('(^|\\s)' + classPrefix + 'no-js(\\s|$)');
   className = className.replace(reJS, '$1' + classPrefix + 'js$2');
  }
  Modernizr._config.enableClasses && (className += ' ' + classPrefix + classes.join(' ' + classPrefix), 
  isSVG ? docElement.className.baseVal = className : docElement.className = className);
 }(classes), delete ModernizrProto.addTest, delete ModernizrProto.addAsyncTest;
 for (var i = 0; i < Modernizr._q.length; i++) {
  Modernizr._q[i]();
 }
 window.Modernizr = Modernizr;
}(window, document);