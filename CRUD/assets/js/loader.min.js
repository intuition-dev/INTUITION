// v5.02.11 on 2019-03-19T10:34:53.267Z
function onDeviceReady() {
 depp.done('deviceready');
}
function disE(evtName, data, ctx) {
 dispatchEvent(new CustomEvent(evtName, {
  detail: {
   data: data,
   ctx: ctx
  }
 }));
}
function onLoaded() {
 depp.require([ 'css' ]), $('#navOpen').offcanvas({
  triggerButton: '#off-cbut'
 });
 let offcanvas = $('#navOpen').data('offcanvas-component');
 $('#off-cbut').click(function() {
  offcanvas.open();
 }), $('#navOpen').click(function() {
  offcanvas.close();
 }), $('.delayShowing').removeClass('delayShowing'), depp.done('onLoaded'), bAuth = new BaseAuth();
}
var bAuth;
window.isphone = !1, -1 === document.URL.indexOf("http://") && -1 === document.URL.indexOf("https://") && (window.isphone = !0), 
window.isphone ? document.addEventListener("deviceready", onDeviceReady, !1) : document.addEventListener("DOMContentLoaded", onDeviceReady, !1), 
addEventListener('evtName', function(evt) {}), depp.define({
 pre: [ 'https://cdn.jsdelivr.net/npm/jquery@3.3.1/dist/jquery.slim.min.js', 'https://cdn.jsdelivr.net/npm/js-offcanvas@1.2.8/dist/_js/js-offcanvas.pkgd.js', 'https://cdn.jsdelivr.net/npm/js-offcanvas@1.2.8/dist/_css/prefixed/js-offcanvas.css', ROOT + 'assets/css/gridform.css' ],
 tabLoaded: [ '#pre', 'https://cdn.jsdelivr.net/npm/validator@10.9.0/validator.min.js', 'https://cdn.jsdelivr.net/npm/sweetalert2@7.29.2/dist/sweetalert2.css', 'https://cdn.jsdelivr.net/npm/sweetalert2@7.29.2/dist/sweetalert2.min.js', ROOT + 'assets/3rd/jquery.disableAutoFill.js', 'https://cdn.jsdelivr.net/npm/tabulator-tables@4.1.3/dist/js/tabulator.min.js', 'https://cdn.jsdelivr.net/npm/tabulator-tables@4.1.3/dist/css/tabulator.min.css', 'https://cdn.jsdelivr.net/npm/tabulator-tables@4.1.3/dist/css/tabulator_simple.min.css' ],
 css: [ '#tabLoaded', ROOT + 'assets/css/spectre.css', ROOT + 'assets/css/nav.css', ROOT + 'assets/css/main.css', 'css!https://fonts.googleapis.com/css?family=Open+Sans' ]
}), depp.require([ 'pre', 'deviceready' ], onLoaded);
class BaseAuth {
 constructor() {
  const THIZ = this;
  auth.onAuthStateChanged(function(user_) {
   THIZ.isUserIn();
  });
 }
 sendEmailVerification() {
  this.isUserIn() || auth.currentUser.sendEmailVerification();
 }
 isUserIn() {
  return !!auth.currentUser && auth.currentUser.emailVerified;
 }
}
function getUrlVars() {
 for (var hash, vars = [], hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&'), i = 0; i < hashes.length; i++) {
  hash = hashes[i].split('='), vars.push(hash[0]), vars[hash[0]] = hash[1];
 }
 return vars;
}