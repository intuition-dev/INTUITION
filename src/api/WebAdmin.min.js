// mB v5.05.2 on 2019-04-29T19:39:36.266Z
class WebAdmin {
 constructor(baseURL_) {
  let token = sessionStorage.getItem('idToken');
  null === token && auth.signOut().then(function() {
   '/' !== window.location.pathname && '' !== window.location.pathname && (window.location = '/');
  }).catch(function(error) {}), this.service = axios.create({
   baseURL: baseURL_,
   headers: {
    'fb-auth-token': token
   },
   responseType: 'json'
  }), this.service.interceptors.response.use(function(response) {
   return response;
  }, function(error) {
   return 401 === error.response.status && auth.signOut().then(function() {
    window.location = '/';
   }).catch(function(error) {}), Promise.reject(error);
  });
 }
 getDirsList() {
  return this.service.get('/editors/posts');
 }
 getSubDirsList(id) {
  return this.service.get('/editors/files', {
   params: {
    post_id: id
   }
  });
 }
 getPostMd(id, pathPrefix) {
  return this.service.get('/editors/post', {
   params: {
    post_id: id,
    pathPrefix: pathPrefix
   }
  });
 }
 savePostMd(id, md, pathPrefix) {
  return this.service.put('/editors/post', md, {
   headers: {
    'Content-Type': 'text/plain'
   },
   params: {
    post_id: id,
    pathPrefix: pathPrefix
   }
  });
 }
 createPost(id, pathPrefix) {
  return this.service.post('/editors/new-post', {}, {
   params: {
    post_id: id,
    pathPrefix: pathPrefix
   }
  });
 }
 upload(data, pathPrefix) {
  return this.service.post('/editors/upload', data, {
   params: {
    pathPrefix: pathPrefix
   }
  }).then(function(response) {}).catch(function(error) {});
 }
 setPublishDate(publish_date, pathPrefix) {
  return this.service.put('/editors/set-publish-date', {
   publish_date: publish_date,
   post_id: pathPrefix
  });
 }
 getMbakeVersion() {
  return this.service.get('/editors/mbake-version').then(function(response) {});
 }
}