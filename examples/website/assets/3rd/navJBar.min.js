// mB v5.04.35 on 2019-04-27T03:19:51.308Z
!function(root, factory) {
 'function' == typeof define && define.amd ? define([], factory) : 'object' == typeof exports ? module.exports = factory() : root.Navbar = factory();
}(this, function() {
 var isIE = !(!navigator || null == new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})").exec(navigator.userAgent)) && parseFloat(RegExp.$1), supportTransitions = !(isIE && isIE < 10), mouseHover = 'onmouseleave' in document ? [ 'mouseenter', 'mouseleave' ] : [ 'mouseover', 'mouseout' ];
 function on(element, eventName, handler) {
  element.addEventListener(eventName, handler, !1);
 }
 function addClass(element, classNAME) {
  element.classList.add(classNAME);
 }
 function removeClass(element, classNAME) {
  element.classList.remove(classNAME);
 }
 function hasClass(element, classNAME) {
  return element.classList.contains(classNAME);
 }
 for (var Navbar = function(el) {
  for (var items = ('object' == typeof el ? el : document.querySelector(el)).getElementsByTagName('LI'), close = function(element) {
   hasClass(element, "open") && (removeClass(element, "open"), setTimeout(function() {
    removeClass(element, "open-position");
   }, supportTransitions ? 200 : 0));
  }, enterHandler = function() {
   var that = this;
   clearTimeout(that.timer), hasClass(that, "open") || (that.timer = setTimeout(function() {
    addClass(that, "open"), addClass(that, "open-position");
    for (var siblings = that.parentNode.getElementsByTagName('LI'), h = 0; h < siblings.length; h++) {
     siblings[h] !== that && close(siblings[h]);
    }
   }, 100));
  }, leaveHandler = function() {
   var that = this;
   clearTimeout(that.timer), that.timer = setTimeout(function() {
    close(that);
   }, 300);
  }, i = 0, itemsLength = items.length; i < itemsLength; i++) {
   items[i].getElementsByTagName('UL').length && (on(items[i], mouseHover[0], enterHandler), 
   on(items[i], mouseHover[1], leaveHandler));
  }
 }, Navbars = document.querySelectorAll('[data-function="navJBar"]'), i = 0, nl = Navbars.length; i < nl; i++) {
  new Navbar(Navbars[i]);
 }
 return Navbar;
});